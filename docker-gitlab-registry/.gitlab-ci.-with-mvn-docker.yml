stages:
  - build
  - package
  - deploy

variables:
  DOCKER_REGISTRY: 127.0.0.1:5100
  DOCKER_IMAGE_NAME: mhykari-test/test/java-test
  DOCKER_IMAGE_TAG: 2.0
  DOCKER_IMAGE: $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
  BUILD_DIR: java-gitlab-test
  TARGET_DIR: "/opt/$BUILD_DIR"

default:
  tags:
    - shell-runner   # <== your runner tag

# --------------------
# Build Java JAR with Maven
# --------------------
build_jar:
  stage: build
  image: maven:3.9.4-eclipse-temurin-21
  script:
    - cd project
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - project/target/java-api-1.0-SNAPSHOT.jar
    expire_in: 1 week

# --------------------
# Package into Docker
# --------------------
build_image:
  stage: package
  script:
    # Login to Docker registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin http://127.0.0.1:5100

    # Create build directory
    - mkdir -p $BUILD_DIR

    # Copy JAR file from artifacts
    - cp project/target/java-api-1.0-SNAPSHOT.jar $BUILD_DIR/java-api-1.0-SNAPSHOT.jar

    # Create Dockerfile
    - |
      cat <<EOF > $BUILD_DIR/Dockerfile
      FROM openjdk:17-jdk-slim
      WORKDIR /app
      COPY ./java-api-1.0-SNAPSHOT.jar app.jar
      EXPOSE 8080
      ENTRYPOINT ["java", "-jar", "app.jar"]
      EOF

    # Build & push image
    - docker build -t $DOCKER_IMAGE $BUILD_DIR
    - docker push $DOCKER_IMAGE

    # Create docker-compose.yml
    - |
      cat <<EOF > ./docker-compose.yml
      services:
        java-api:
          image: $DOCKER_IMAGE
          container_name: java-api-test
          ports:
            - "8080:8080"
          restart: always
      EOF

    # Copy to deploy target directory
    - mkdir -p "$TARGET_DIR"
    - cp docker-compose.yml "$TARGET_DIR/docker-compose.yml"

# --------------------
# Deploy
# --------------------
deploy_app:
  stage: deploy
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin http://127.0.0.1:5100
    - docker compose -f "$TARGET_DIR/docker-compose.yml" pull
    - docker compose -f "$TARGET_DIR/docker-compose.yml" down
    - docker compose -f "$TARGET_DIR/docker-compose.yml" up -d
